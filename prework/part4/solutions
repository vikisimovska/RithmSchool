**** Debugging Exercises ****

1.What does the throw keyword do?
The throw keyword stops the execution of the code by throwing an error.
//The throw keyword allows you to return an error/exception of your choice

2.What does the finally keyword do?
The finally keyword executes the code inside its block regardless whether an error 
has been thrown or not. 

3.What is the difference between a TypeError and ReferenceError?
Type error occures when we incorrectly use the data types in java script. 
Reference error occures when we try to access a variable that doesnt exist
in that particular scope.
//TypeErrors occur when JavaScript is unable to perform a certain operation on a data type
// (invoking something that is not a function, accessing properties on something that is not an object). 
//ReferenceErrors occur when JavaScript does not have a reference to the variable in memory 
//(accessing a variable that is not defined or not in the current or outer scope)

4.How do you create a snippet in the Chrome dev tools?
You create a snippet by going into the Sources and pressing + new snipet button

5.In the Chrome dev tools, on the right hand side of the sources tab, there is a 
"pause" button which allows you to "pause on caught exceptions." What is an exception?
An exception is an event, which occurs during the execution of a program, that disrupts
the normal flow of the programs instructions. 
//An exception is an error that occurs in your program. 
//Caught exceptions are errors that are evaluated in a try/catch block

6.How do we "catch" errors in JavaScript? Give an example with code for what that might look like.
If the code throws an error, we could "catch" it, and in that way gracefully handeled it, 
so the prog doesnt crash. 
We catch errors with a try catch block:

var str = "Hi";
try{
	//trying to invoke variable
	str();
} catch (e){
	console.log("This is a type error is ", e);
}

Explain what type of error will be thrown, why the error is occuring, and how to fix it:

1. 
person;

Reference Error because person is not defined.

2.var data = {};
data.displayInfo();

Type error -  we are trying to invoke undefined.

3.var data = {};
data.displayInfo.foo = "bar";

Type Error - we are trying to assign property on undefined.

4.function data(){
    var thing = "foo";
}
data()
thing;

Reference error - think variable doesnt exist in the outer(global) scope.





Variables
  1.var name = “Violeta Simovska”;
var dayOfBirth = 12;
  2.the one thats declared and assigned last
  3.var color = prompt ("Please enter your favorite color");
console.log( color + " is a good choice!");
  4.var sentence = 'Somebody once said: "When in Rome, do as the Romans do" ';
  5.When a variable is declared but no value is assigned to it its type is undefined. When we assign null to a variable, we intentionally leave the variable empty. Its type is Object.
  6.NaN - not a number, is a property of a global obj. Its typeof is Number.
  7. undefined

Boolean Logic Exercises

Part I
1.true, true, 1, true, false, true, true
 
Part II
1. Keep it up!"
2. Because  ‘if statements evaluate boolean expression’, and since the variable isLearning already evaluates to true, plus is not a falsy value, it evaluates to true.

1. thid ..because it is the first expressions that returns true : the value of firstVariable is false and the value of thirdVariable is true.  false or true returns true.
2. undefined
3. no, because its one of the 6 javascript falsey values. When evaluated in a boolean expression some values like null, 0, undefined..ect are false.
4. no, false because its one of the 6 falsey values too.
5. yes..because its not falsey.

Part III
1.
if (Math.random() > 0.5 ){
  console.log ("Over 0.5");
} else {
  console.log ("Under 0.5");
}
2. Its a concept in JS that aside from false there are 5 more falsey values when evaluated inside an if statement: 0, null, undefined, “”, NaN. 


ARRAY BASICS
1. favoriteFoods = ["sushi", "pizza", "pretzel"];
2. favoriteFoods[1];
3. favoriteFoods[favoriteFoods.length-1] = “burrito”;
4. var formerFavoriteFood = favoriteFoods.shift();
5. favoriteFoods.push("rice");
6. favoriteFoods.unshift(“fajita”);
7. it returns undefined.
8. [2, 3, 4, 5].splice(1,1);
       ["alpha", "gamma", "delta"].splice(1,0,"betta");
       [10,-10,-5,-3,2,1].splice(1, 3, 9, 8, 7, 6, 5, 4, 3);

ARRAY METHODS

PART I
var arr = [];
arr.push("Viki");
arr.push("Simovska");
arr.unshift("blue");
arr.shift();
var arr2 = [];
arr2.push(27);
arr2.push("Java Script");
arr2.indexOf(42);
it will return -1, if the value wasnt found.

PART II
1.arr.pop().shift();
2.arr.concat(["Haskell", "Clojure"]);
3.["JavaScript", "Python", "Ruby", "Java"].join(", ");
4.Passing the value copies the value into a new memory location.
Passing by reference, copies the memory location address and assigns it
to a new variable (both variables pointing to the same place in memory).

ARRAY EXCERCISES
1. for (var i = 0; i < people.length; i++ ){
           console.log (people[i]);
         }
2. people.shift();
3. people.pop();
4. people.unshift("Matt");
5. people.push("Viki”);
6. for (var i = 0; i < people.length; i++ ){
	console.log (people[i]);
    if (people[i] === "Mary") break;
   }
7. var newArr = people.slice(2,4);
8. people.indexOf("Mary”);
9. people.indexOf("Foo");
10. people = ["Greg", "Mary", "Devon", "James"];
people.splice(2,1,"Elizabeth","Artie");
11. var withBob = people.concat("Bob");

Object Basics
Exercises:
1. var me = {
       firstName = "Viki",
       lastName = "Simovska",
       occupation = "student"
   }
2. me.firstName;
      me.lastName;
      me.occupation;
      me[“firstName”];
      me[“lastName”];
      me[“occupation”];
3. me.hobby = "swimming";
       delete me.occupation;
4. Unless is variable or expression we can use dot notification. For the other 2 cases we’ll need to use bracket notification.

OBJECT ITERATIONS
Exercises:
1.for (var key in namesAndHobbies){
    console.log(namesAndHobbies[key] + "=>" + key);
}
2. namesAndHobbies.Viki = "swimming";
3.if ("Viki" in namesAndHobbies){
       console.log ("Viki : " + namesAndHobbies.Viki);
     }

OBJECT EXERCISES:
1.programming.languages.push("GO");
2.programming.difficulty = 7;
3.delete programming.jokes;
4.programming.isFun = true;
5.for (var i=0; i < programming.languages.length; i++ ){
    console.log(programming.languages[i]);
}
6.for (var key in programming){
    console.log(key);
    }
7.for (var key in programming){
    console.log(programming[key]);
   }

FUNCTION EXERCISES:
function difference(num1,num2){
	  return num1-num2;
}
function product(num1, num2){
	  return num1*num2;
}

function printDay(num){
  var days = {
	    1: "Sunday",
	    2: "Monday",
	    3: "Tuesday",
	    4: "Wednesday",
	    5: "Thursday",
	    6: "Friday",
	    7: "Saturday",
     };
	  return days[num];
  }

function lastElement(arr){
     return arr[arr.length-1];
}

function numberCompare(num1, num2){
    if(num1 > num2){
	    return ‘First is greater’;
     } else if (num2 > num1){
	    return ‘Second is greater’;
     } else {
	  return ‘Numbers are equal’;  
     }
}
   function singleLetterCount(word, letter){
	 var counter = 0;
	  for(var i=0; i< word.length; i++){
	     if(word[i].toLowerCase() === letter.toLowerCase()){
	         counter++;
	     }
	  }
	  return counter;
    }


	function multipleLetterCount(str){
	  var obj = {};
	  for(var i = 0; i < str.length; i++){
	    if (!(str[i] in obj)){
	      obj[str[i]] = 1;
	    } else {
	       obj[str[i]]++;
	    }
	  }
	  return obj;
	}


	function arrayManipulation(arr, command, location, value){
	  if(command === 'remove' && location === 'end'){
	         return arr.pop();
	    } 
            if (command === 'remove' && location === ‘beginning’){
	         return arr.shift();
             }
	     if(command === 'add' && location === ‘beginning’){
	         arr.unshift(value);
	          return arr;
	    }
	    if (command === 'add' && location === ‘end’){
                 arr.push(value);
	         return arr;
	  }
	}


	function isPalindrome(str){
	  return str.toLowerCase().split('').reverse().join('') === str.toLowerCase();
	}

Nested Array Excercises:
1.
function rotate(arr, num){
  for (var i=0; i<num; i++){
  var lastNum = arr.pop();
  arr.unshift(lastNum);
  }
  console.log(arr);
}
	
2.
function makeXOGrid(col, rows){
  var arrMain = [];
  var arr;
  for (var i=0; i<col; i++){
    arr = [];
    for (var j=0; j<rows; j++)
    {
      if (j%2 === 0)
      {
        arr[j]="X";
      } else {
        arr[j]="O";
      }
    }
   arrMain.push(arr);
  }
  console.log(arrMain);
}	


Part II
Fix the broken code and explain what was wrong:

1.for(var i=0; i > 5; i++){
    console.log(i);
}

The condition is wrong. i will never be grater then 5. It can only be less.
for(var i=0; i < 5; i++){
    console.log(i);
}

2.function addIfEven(num){
    if(num % 2 = 0){
        return num + 5;
    }
    return num;
}

The assigment operator in the second line. It needs to be a comparison operator instead.
function addIfEven(num){
    if(num % 2 === 0){
        return num + 5;
    }
    return num;
}

3. function loopToFive(){
    for(var i=0, i < 5, i++){
        console.log(i);
    }
}

It needs semicolons instead of colons in the for loop.

function loopToFive(){
    for(var i=0; i < 5; i++){
        console.log(i);
    }
}

4. function displayEvenNumbers(){
    var numbers = [1,2,3,4,5,6,7,8];
    var evenNumbers = [];
    for(var i=0; i<numbers.length-1; i++;){
        if(numbers % 2 = 0); {
            evenNumbers.push(i);
        }
        return evenNumbers;
    }
}
displayEvenNumbers(); // should return [2,4,6,8] 

Few things are wrong:
-On line 3 inside the for loop:
- The condition is wrong its not grabbing the last number and no need of sami colon after i++
- In the if statement the asignment operator is wrong and the semi colon after the ')'
- Line 6 needs to be pushing an element form the numbers arr instead of the index
- It needs to be returning the arr  outside the foor loop

function displayEvenNumbers(){
    var numbers = [1,2,3,4,5,6,7,8];
    var evenNumbers = [];
    for(var i=0; i<numbers.length; i++){
        if(numbers[i] % 2 === 0) {
            evenNumbers.push(numbers[i]);
        }
    }
    return evenNumbers;
}
displayEvenNumbers(); // should return [2,4,6,8] 


Higher Order Functions, Timers, and Closures Exercises.:
   function countDown(time){
	  var timer = setInterval(function(){
	    time--;
	    if(time <= 0){
	      clearInterval(timer);
	      console.log('DONE!');
	    }
	    else {
	      console.log(time);
	    }
	 },1000)
	}
	

	function randomGame(){
	  var num;
	  var times = 0;
	  var timer = setInterval(function(){
	    num = Math.random();
	    times++
	    if(num > .75) {
	      clearInterval(timer);
	      console.log("It took " + times + " try/tries.");
	    }
	  },1000)
	}
	

	function isEven(num){
	  return num % 2 === 0;
	}
	

	function isOdd(num){
	  return num % 2 !== 0;
	}
	

	function isPrime(value) {
	    for(var i = 2; i <= Math.sqrt(value); i++) {
	        if(value % i === 0) {
	            return false;
	        }
	    }
	    return value > 1;
	}
	

	function numberFact(num, fn){
	  return fn(num);
	}
	

	function find(arr, fn){
	  for(var i=0; i<arr.length; i++){
	    if(fn(arr[i])) return arr[i];
	  }
	}
	

	function findIndex(arr, fn){
	  for(var i=0; i<arr.length; i++){
	    if(fn(arr[i])) return i;
	  }
	}
	

	function specialMultiply(a,b){
	  if(arguments.length === 1){
	    return function(b){
	      return a*b;
	    }
	  }
	  return a*b;
	}



   

       










