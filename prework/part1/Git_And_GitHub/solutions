**GitHub Basics Exercise**

1.Create a local repository and add and commit some files:

mkdir learn_git
cd learn_git
touch first.txt
git init
git add .
git commit -m “adding first text”
git log —oneline
touch second.txt
git add second.txt
git commit -m “"adding second.txt"
rm first.txt
git a .
git commit -m "removing first.txt"
git log —oneline

2.Create a remote repository and push your code from the local repo to the remote:

Creating a new repository on GitHub  - 'RithmSchool'
git remote add origin https://github.com/vikisimovska/RithmSchool
git push -u origin master
forked it from github
git clone https://github.com/vikisimovska/git_practice.git
adding a file
sending pull request


**Git Basics Exercises**

mkdir learn_git_again
cd learn_git_again
touch third.txt
git init
git add third.txt
touch fourth.txt
git add fourth.txt
git commit -m "adding fourth.txt"
rm third.txt
git add .
git commit -m "removing third.txt"
git log —oneline
git config —global core.pager ”cat”
git config --global --list


**Branching and Merging Exercises**

PART 1

1. Git clean removes untracked or unmerged file .. files that have not been staged yet.
2. -f and -d flags for git clean remove untracked directories as well as untracked files.
3. git checkout -b new_branch
4. When different commits happen at different times on two branches, and git can not easily determine what order these commits happened in, a recursive merge needs to happen. 
(fast forwards can only happen if there have not been commits on the original branch while the new branch is being worked on)
5.git checkout new_branch
6.git checkout
7.git branch -D
8.shows a difference between two different commits
9. git rm --cached or git reset HEAD 
10. When commiting to a file from 2 different branches, so the file end up having different content.


PART 2

mkdir test_merging
echo hi form master branch > file1
git add .
git commit -m “1st commit”

git checkout -b new_branch
echo hi from the new branch > file2
git add.
git commit -m “2nd commit”

git checkout master
echo hi form master branch > file2
git a .
git commit -m “creating merging conflict”

***merge conflict!***

Auto-merging prework/part1/test_merging/file2
CONFLICT (add/add): Merge conflict in prework/part1/test_merging/file2
Automatic merge failed; fix conflicts and then commit the result.

vim file2
erasing everything except ‘hi form master branch’
git a .
git commit -m “conflict fixed”

git merge new_branch


**GitHub Exercises**

1.mkdir new_dir
git init
cd new_dir
echo hi > first.txt
git add .
git commit -m “first commit"


2.creating repo on GitHub
git remote add origin new_repo_url
git push -u origin master
































































